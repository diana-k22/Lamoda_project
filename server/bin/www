#!/usr/bin/env node

/**
 * Module dependencies - Зависимости модуля.
 */

//***************************************************************************** */

// REQUIRE - подключает из библиотек разные пакеты (например: http)    

// REQUEST (req) - служит для того, чтобы мы получали информацию по запросу, 
                  //который отправляет клиент на сервер.

// RESPONSE (res) - отвечает за объект сервера

//****************************************************************************** */


var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

//---------------TEST----------------------------------------
const fs = require('fs')
const path = require('path');
const { red } = require('@mui/material/colors');
//----------------TEST--------------------------------------------
/**
 * Get port from environment and store in Express - 
    Получить порт из среды и сохранить в Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server - Создать HTTP-сервер.
 */
// 
//  var server = http.createServer(app)


//------------------------------TEST---------------------------------------------------------------------
var server = http.createServer((req, res) => {

 
  // //Если request url равен слешу(базовая страница)
  // if (req.url === '/') {
  //   // то тогда с помощью модуля fs, я буду читать файл, 
  //   //который лежит по адресу относительно текущей директории в папке test имя файла index.html
  //   //вторым параметром мы передаем потанциальную ошибку и некоторые данные
  //   fs.readFile(path.join(__dirname, 'test', 'index.html'), (err, data) => {
  //      //Если у нас есть ошибка, то мы ее выкидываем
  //     if (err) {
  //       throw err
  //     }
  //      // а если все хорошо то указываем хедеры, что статус = 200
  //     res.writeHead(200, {
  //       'Content-type': 'text/html'
  //     })
  //     //передаем ту дату, которую получили
  //     res.end(data)
  //   })
  // } else if (req.url === '/contact') { //Если адрес ровняется контакт
  //   // то тогда с помощью модуля fs, я буду читать файл, 
  //   //который лежит по адресу относительно текущей директории в папке test имя файла contact.html
  //   //вторым параметром мы передаем потанциальную ошибку и некоторые данные
  //   fs.readFile(path.join(__dirname, 'test', 'contact.html'), (err, data) => {
  //      //Если у нас есть ошибка, то мы ее выкидываем
  //     if (err) {
  //       throw err
  //     }
  //      // а если все хорошо то указываем хедеры, что статус = 200
  //     res.writeHead(200, {
  //       'Content-type': 'text/html'
  //     })
  //     //передаем ту дату, которую получили
  //     res.end(data)
  //   })
  // }
          // МОЖНО ОПТИМИЗИРОВАТЬ КОД ВЫШЕ И НАПИСАТЬ ВОТ ТАК: СМОТРЕТЬ НИЖЕ!

// Создаем еременную которую будем получать из модуля path. Далее вызываем метод join где:
// первым параметром передаем текущую директорию, вторым параметром мы переходим в папку test
// Далее нам надо указать название файла.
// Здесь можем спросить: Если req.url равняется '/' - это означает, что мы хотим получить файл с названием 'index.html'
// А иначе просто передаем req.url (если будет стр контактов или любая другая, она подключится и мы получим этот файл)
    let filePath = path.join(__dirname, 'test', req.url === '/' ? 'index.html' : req.url)

// 1. Создаем дополнительную проверку, чтобы проверять расширение с помощью модюля path функции extname
    const ext = path.extname(filePath)
//1.3 Создали переменную и по умолчанию это будет'text.html'
    let contentType = 'text/html'
// 1.4 У нас есть переменная ext по которой мы можем проверить какое расширение пришло
// воспользуемся switch передаем в параметры ext и спрашиваем
    console.log(ext)
    switch (ext) {
      //если пришло расширение '.css' добавь раширение 'text/css' и тд
      case '.css':
        contentType = 'text/css'
        break
      case '.js':
        contentType = 'text/javascript'
        break
      //дефолтное расширение у нас 'text/html'
      default:
        contentType = 'text/html'
    }
    console.log('was here', contentType)
//1.2 Далее мы спрашиваем, если не ext? тоесть нет раширения, то добавь '.html'
    if(!ext) {
      filePath += '.html'
    }
    console.log(filePath)

//Обращаемся к модулю filed sistem(fs) далее читаем файл по пути filePath. 
//Далее в колбеке мы принимаем потанциальную ошибку и некоторую дату, которая относится к нашему файлу
    fs.readFile(filePath, (err, content) => {
      //Если есть ошибка можем вывести сторицу ошибки
      if(err) {
        //читаем файл который называется error.html, вторым параметром принимаем ошибку, данные
        fs.readFile(path.join(__dirname, 'test', 'error.html'), (err, data) => {
          // если здесь возникает ошибка, то мы можем показать статус 500, серверная ошибка
          if(err) {
            res.writeHead(500)
            res.end('Error')
            //если ошибки нет, то тогда мы обращаемся к res.writeHead, говорим, что у нас все хорошо, статус 200
            }else {
              res.writeHead(200, {
                'Content-type': 'text/html'
              })
              //Возвращаем страницу ошибки, в нашем случае, это data  
              res.end(data)
            }
          })
      //иначе, если данной ошибки нет, то мы так же можем добавить в заголовке, что это html
      }else {
        res.writeHead(200, {
          'Content-type': contentType
        })
        // и просто вернуть content
        res.end(content)
      }
    })
});



//-------------------------TEST----------------------------------------------------------------------------
/**
 * Listen on provided port, on all network interfaces - 
 * Слушайте на указанном порту, на всех сетевых интерфейсах.
 */

server.listen(port, () => {
  console.log('started')  
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false - 
    Нормализовать порт в число, строку или false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe - именованный канал
    return val;
  }

  if (port >= 0) {
    // port number - номер порта
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event. - 
  Прослушиватель событий для события "ошибка" HTTP-сервера.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages - 
  // обрабатывать определенные ошибки прослушивания с помощью дружественных сообщений
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event. - 
  Прослушиватель событий для события «прослушивания» HTTP-сервера.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
